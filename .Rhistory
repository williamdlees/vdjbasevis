y = sub_geno$y,
text = sub_geno$text,
xref = 'x',
yref = 'y', showarrow = FALSE, font=list(color='black',size=0.1))
})
}
)
m[nrow(m)-3,]
m[nrow(m)-2,]
colorScale
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
colorbar=list(tickmode='array', tick0=-zmn, dtick=1,tickvals= 0.5:(ncols+1), ticktext=c("",col_names),
len = 1, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)),
shapes = lapply(seq(12,genes_n*12,by=12),vline)) %>%
plotly::add_annotations(x = sub_geno$x,
y = sub_geno$y,
text = sub_geno$text,
xref = 'x',
yref = 'y', showarrow = FALSE, font=list(color='black',size=0.1))
plot_width <- 100 + 6*ncol(m)
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)),
shapes = lapply(seq(12,genes_n*12,by=12),vline)) %>%
plotly::add_annotations(x = sub_geno$x,
y = sub_geno$y,
text = sub_geno$text,
xref = 'x',
yref = 'y', showarrow = FALSE, font=list(color='black',size=0.1))
htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
seq(12,genes_n*12,by=12)
seq(11.9,genes_n*12,by=12)
time <- Sys.time()
# select columns
geno_db <- geno_table %>% select(.data$SUBJECT,.data$GENE,.data$GENOTYPED_ALLELES,.data$K_DIFF,.data$Freq_by_Clone)
# rename the columns
names(geno_db)[3:4] <- c("ALLELES", "K")
# correct deletion annotations
geno_db$ALLELES <- gsub("Deletion","Del",geno_db$ALLELES)
# set data.table and correct missing Unk annotations and K
geno_db <- setDT(geno_db)[CJ(SUBJECT = SUBJECT, GENE = GENE, unique=TRUE), on=.(SUBJECT, GENE)]
geno_db[is.na(ALLELES) , c("ALLELES","K") := list("Unk", NA_integer_)]
# set K value for deleted genes
geno_db$K[grep("Del",geno_db$ALLELES)] <- NA_integer_
# expand row, one allele per row
geno_db <- splitstackshape::cSplit(geno_db, "ALLELES", sep = ",", direction = "long", fixed = T, type.convert = F)
# add pseudo genes and orf to color base
color_pes_orf <- c()
if(pseudo_genes){
color_pes_orf <- c(grep("V",PSEUDO[[chain]],value = T),color_pes_orf)
}
if(ORF_genes){
color_pes_orf <- c(unique(grep("OR|NL", geno_db$GENE,value = T)),color_pes_orf)
}
# sort the data, remove pseudo and orf if needed
geno_db <- sortDFByGene(DATA = geno_db, chain = chain, method = gene_sort, removeIGH = removeIGH, geno = T,
peseudo_remove = pseudo_genes, ORF_remove = ORF_genes)
geno_db$GENE <- factor(geno_db$GENE, levels = gsub("IG[H|K|L]", "", GENE.loc[[chain]]))
# rename genes to numbers
gene_loc <- 1:length(unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))])
names(gene_loc) <- unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))]
geno_db$GENE_LOC <- gene_loc[as.character(geno_db$GENE)]
######sort the heatmap for plotting
geno_db_m <- geno_db[, n:=  .N, by = list(SUBJECT,GENE)][] # count number of alleles for group
geno_db_m$ALLELES_G <- geno_db_m$ALLELES # for grouping
geno_db_m$text <- ''
geno_db_m$text_bottom <- geno_db_m$ALLELES
# change ambiguous alleles call
id_nra <- grepl("[0-9][0-9]_[0-9][0-9]", geno_db_m$ALLELES)
nra <- F
if (any(id_nra)) {
# number ambiguous alleles
num_text <- paste0('[*',1:length(unique(geno_db_m$ALLELES[id_nra])),']')
names(num_text) <- unique(geno_db_m$ALLELES[id_nra])
# text for plot
geno_db_m$text[id_nra] <- num_text[geno_db_m$ALLELES[id_nra]]
# text for legend
geno_db_m$text_bottom[id_nra] <- paste(num_text[geno_db_m$ALLELES[id_nra]],geno_db_m$ALLELES[id_nra])
# change allele to NRA - non reliable allele
geno_db_m$ALLELES[id_nra] <- "NRA"
# indicates that nra exists
nra <- T
}
# create allele palette
allele_palette <- allelePalette(geno_db_m$ALLELES)
# sort novel allele calls for plot
val_novel <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',geno_db_m$ALLELES, value = T)
novel <- F
novel_allele_text <- c()
novel_symbol <- "\u005E"
if(length(val_novel)!=0){
# sort the palettle colors for novel alleles
id <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',names(allele_palette$transper))
allele_palette$transper[id] <- 1
# cerate code index for novel allele
code_allele <- paste0(novel_symbol,1:length(id))
names(code_allele) <-allele_palette$AlleleCol[id]
new_allele <- paste0(novel_symbol,1:length(id),'-',allele_palette$AlleleCol[id])
names(new_allele) <-allele_palette$AlleleCol[id]
# change the text for plot
ids <- geno_db_m$ALLELES %fin% names(new_allele)
rep <- new_allele[geno_db_m$ALLELES[ids]]
rep2 <- code_allele[geno_db_m$ALLELES[ids]]
# add new allele code to data
geno_db_m[ids, c("ALLELES","text_bottom","text") := list(rep,rep,rep2)]
# change annotation in legend colors
allele_palette$AlleleCol[id] <- new_allele
names(allele_palette$transper)[id] <- new_allele
# indicates that novel exists
novel <- T
}
geno_db_m$ALLELES <- factor(geno_db_m$ALLELES, levels = allele_palette$AlleleCol)
# samples names and number
samples <- unique(geno_table$SUBJECT)
samples_n <- length(samples)
# genes names and number
genes <- unique(geno_db_m$GENE)
genes_n <- length(genes)
# order the data by gene loc
setorderv(geno_db_m, c("SUBJECT","GENE_LOC"))
setkey(geno_db_m, SUBJECT)
# sort data for matrix
geno_db_m[,line:=12/n]
allele_code <- sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T)
last <- as.numeric(allele_code[length(allele_code)-3])+1
ids_a <- last:(last+2)
allele_code[(length(allele_code)-2):length(allele_code)] <- ids_a
names(allele_code) <- gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol)
# sort the alleles in gene box
geno_db_m[,A_CODE:=as.numeric(allele_code[ALLELES])]
geno_db_m[grep("[0-9]_[0-9]",geno_db_m$ALLELES,perl = T),A_CODE:=allele_code["NRA"]]
setorderv(geno_db_m, c("SUBJECT","GENE_LOC","A_CODE"))
# duplicate the data by 12 box to gene
geno_db_m[,id := 1:.N, by = .(SUBJECT, GENE)]
geno_db_f = geno_db_m[,.(n_line = 1:line), by = .(SUBJECT, GENE, GENE_LOC, ALLELES_G, A_CODE,text_bottom), nomatch = 0]
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(geno_db_f[[5]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
allele_code_t <- allele_palette$AlleleCol
names(allele_code_t) <- allele_code
geno_db_f[,text:=paste("Individual:",SUBJECT,"<br />Gene:",GENE,"<br />Allele:",text_bottom)]
conditions.text <- matrix(geno_db_f[[8]], ncol = 12*genes_n, byrow = TRUE)
conditions.cols <- matrix(geno_db_f[[9]], ncol = 12*genes_n, byrow = TRUE)
vline <- function(x = 0, color = "white") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
colorbar=list(tickmode='array', tick0=-zmn, dtick=1,tickvals= 0.5:(ncols+1), ticktext=c("",col_names),
len = 1, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# ad text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
sub_geno = geno_db_m[ids_text,]
# NR = samples_n
# NC = genes_n*12
# annot <- do.call(rbind,apply(sub_geno, 1,function(x){
#   I = which(x["SUBJECT"]==samples)    # row index
#   J = (as.numeric(x["GENE_LOC"])-1)*12            # column index
#   ALLELE =  as.numeric(x["id"])                   # allele index
#   N_ALLELES = as.numeric(x["n"])                  # number of alleles
#   TEXT =  x["text"]                   # text
#   data.frame(x = J+(ALLELE*(12/N_ALLELES))-1.5, y = I,text = TEXT)
# }
# ))
sub_geno[, y:=match(SUBJECT,samples)]
sub_geno[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 6*ncol(m)
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)),
shapes = lapply(seq(11.9,genes_n*12,by=12),vline)) %>%
plotly::add_annotations(x = sub_geno$x,
y = sub_geno$y,
text = sub_geno$text,
xref = 'x',
yref = 'y', showarrow = FALSE, font=list(color='black',size=0.1))
htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
time-Sys.time()
time <- Sys.time()
# select columns
geno_db <- geno_table %>% select(.data$SUBJECT,.data$GENE,.data$GENOTYPED_ALLELES,.data$K_DIFF,.data$Freq_by_Clone)
# rename the columns
names(geno_db)[3:4] <- c("ALLELES", "K")
# correct deletion annotations
geno_db$ALLELES <- gsub("Deletion","Del",geno_db$ALLELES)
# set data.table and correct missing Unk annotations and K
geno_db <- setDT(geno_db)[CJ(SUBJECT = SUBJECT, GENE = GENE, unique=TRUE), on=.(SUBJECT, GENE)]
geno_db[is.na(ALLELES) , c("ALLELES","K") := list("Unk", NA_integer_)]
# set K value for deleted genes
geno_db$K[grep("Del",geno_db$ALLELES)] <- NA_integer_
# expand row, one allele per row
geno_db <- splitstackshape::cSplit(geno_db, "ALLELES", sep = ",", direction = "long", fixed = T, type.convert = F)
# add pseudo genes and orf to color base
color_pes_orf <- c()
if(pseudo_genes){
color_pes_orf <- c(grep("V",PSEUDO[[chain]],value = T),color_pes_orf)
}
if(ORF_genes){
color_pes_orf <- c(unique(grep("OR|NL", geno_db$GENE,value = T)),color_pes_orf)
}
# sort the data, remove pseudo and orf if needed
geno_db <- sortDFByGene(DATA = geno_db, chain = chain, method = gene_sort, removeIGH = removeIGH, geno = T,
peseudo_remove = pseudo_genes, ORF_remove = ORF_genes)
geno_db$GENE <- factor(geno_db$GENE, levels = gsub("IG[H|K|L]", "", GENE.loc[[chain]]))
# rename genes to numbers
gene_loc <- 1:length(unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))])
names(gene_loc) <- unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))]
geno_db$GENE_LOC <- gene_loc[as.character(geno_db$GENE)]
######sort the heatmap for plotting
geno_db_m <- geno_db[, n:=  .N, by = list(SUBJECT,GENE)][] # count number of alleles for group
geno_db_m$ALLELES_G <- geno_db_m$ALLELES # for grouping
geno_db_m$text <- ''
geno_db_m$text_bottom <- geno_db_m$ALLELES
# change ambiguous alleles call
id_nra <- grepl("[0-9][0-9]_[0-9][0-9]", geno_db_m$ALLELES)
nra <- F
if (any(id_nra)) {
# number ambiguous alleles
num_text <- paste0('[*',1:length(unique(geno_db_m$ALLELES[id_nra])),']')
names(num_text) <- unique(geno_db_m$ALLELES[id_nra])
# text for plot
geno_db_m$text[id_nra] <- num_text[geno_db_m$ALLELES[id_nra]]
# text for legend
geno_db_m$text_bottom[id_nra] <- paste(num_text[geno_db_m$ALLELES[id_nra]],geno_db_m$ALLELES[id_nra])
# change allele to NRA - non reliable allele
geno_db_m$ALLELES[id_nra] <- "NRA"
# indicates that nra exists
nra <- T
}
# create allele palette
allele_palette <- allelePalette(geno_db_m$ALLELES)
# sort novel allele calls for plot
val_novel <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',geno_db_m$ALLELES, value = T)
novel <- F
novel_allele_text <- c()
novel_symbol <- "\u005E"
if(length(val_novel)!=0){
# sort the palettle colors for novel alleles
id <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',names(allele_palette$transper))
allele_palette$transper[id] <- 1
# cerate code index for novel allele
code_allele <- paste0(novel_symbol,1:length(id))
names(code_allele) <-allele_palette$AlleleCol[id]
new_allele <- paste0(novel_symbol,1:length(id),'-',allele_palette$AlleleCol[id])
names(new_allele) <-allele_palette$AlleleCol[id]
# change the text for plot
ids <- geno_db_m$ALLELES %fin% names(new_allele)
rep <- new_allele[geno_db_m$ALLELES[ids]]
rep2 <- code_allele[geno_db_m$ALLELES[ids]]
# add new allele code to data
geno_db_m[ids, c("ALLELES","text_bottom","text") := list(rep,rep,rep2)]
# change annotation in legend colors
allele_palette$AlleleCol[id] <- new_allele
names(allele_palette$transper)[id] <- new_allele
# indicates that novel exists
novel <- T
}
geno_db_m$ALLELES <- factor(geno_db_m$ALLELES, levels = allele_palette$AlleleCol)
# samples names and number
samples <- unique(geno_table$SUBJECT)
samples_n <- length(samples)
# genes names and number
genes <- unique(geno_db_m$GENE)
genes_n <- length(genes)
# order the data by gene loc
setorderv(geno_db_m, c("SUBJECT","GENE_LOC"))
setkey(geno_db_m, SUBJECT)
# sort data for matrix
geno_db_m[,line:=12/n]
allele_code <- sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T)
last <- as.numeric(allele_code[length(allele_code)-3])+1
ids_a <- last:(last+2)
allele_code[(length(allele_code)-2):length(allele_code)] <- ids_a
names(allele_code) <- gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol)
# sort the alleles in gene box
geno_db_m[,A_CODE:=as.numeric(allele_code[ALLELES])]
geno_db_m[grep("[0-9]_[0-9]",geno_db_m$ALLELES,perl = T),A_CODE:=allele_code["NRA"]]
setorderv(geno_db_m, c("SUBJECT","GENE_LOC","A_CODE"))
# duplicate the data by 12 box to gene
geno_db_m[,id := 1:.N, by = .(SUBJECT, GENE)]
geno_db_f = geno_db_m[,.(n_line = 1:line), by = .(SUBJECT, GENE, GENE_LOC, ALLELES_G, A_CODE,text_bottom), nomatch = 0]
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(geno_db_f[[5]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
allele_code_t <- allele_palette$AlleleCol
names(allele_code_t) <- allele_code
geno_db_f[,text:=paste("Individual:",SUBJECT,"<br />Gene:",GENE,"<br />Allele:",text_bottom)]
conditions.text <- matrix(geno_db_f[[8]], ncol = 12*genes_n, byrow = TRUE)
conditions.cols <- matrix(geno_db_f[[9]], ncol = 12*genes_n, byrow = TRUE)
vline <- function(x = 0, color = "white") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
colorbar=list(tickmode='array', tick0=-zmn, dtick=1,tickvals= 0.5:(ncols+1), ticktext=c("",col_names),
len = 1, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# ad text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
sub_geno = geno_db_m[ids_text,]
# NR = samples_n
# NC = genes_n*12
# annot <- do.call(rbind,apply(sub_geno, 1,function(x){
#   I = which(x["SUBJECT"]==samples)    # row index
#   J = (as.numeric(x["GENE_LOC"])-1)*12            # column index
#   ALLELE =  as.numeric(x["id"])                   # allele index
#   N_ALLELES = as.numeric(x["n"])                  # number of alleles
#   TEXT =  x["text"]                   # text
#   data.frame(x = J+(ALLELE*(12/N_ALLELES))-1.5, y = I,text = TEXT)
# }
# ))
sub_geno[, y:=match(SUBJECT,samples)]
sub_geno[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 6*ncol(m)
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)),
shapes = lapply(seq(11.9,genes_n*12,by=12),vline)) %>%
plotly::add_annotations(x = sub_geno$x,
y = sub_geno$y,
text = sub_geno$text,
xref = 'x',
yref = 'y', showarrow = FALSE, font=list(color='black',size=0.1))
htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
Sys.time() - time
#htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
plotly_save_html <- function(x, width = NULL, height = NULL, file = NULL) {
precompiled_html_header <- readRDS("precompiled_html_header.rds")
p <- plotly_build(x)
html <- htmlwidgets:::toHTML(p)
rendered <- htmltools::renderTags(html)
id <- substr(rendered$html, 10, 20)
linebreak <- regexpr('\n', rendered$html)
rendered$htmlwidget <- paste0("  ", substr(rendered$html, 1, linebreak))
rendered$htmlwidget_sizing <- paste0(
"<script type=\"application/htmlwidget-sizing\" data-for=\"",
id,
"\">{\"viewer\":{\"width\":\"100%\",\"height\":400,\"padding\":15,\"fill\":true},\"browser\":{\"width\":\"100%\",\"height\":400,\"padding\":40,\"fill\":true}}</script>")
html <- c(
precompiled_html_header,
"<body style=\"background-color:white;\">",
"<div id=\"htmlwidget_container\">",
rendered$htmlwidget,
"</div>",
substr(rendered$html, linebreak+1, nchar(rendered$html)),
rendered$htmlwidget_sizing,
"</body>",
"</html>"
)
writeLines(html, file)
}
time = Sys.time()
plotly_save_html(p, file = "plotly_precompiled_test.html")
Sys.time() - time
x = p
#htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
plotly_save_html <- function(x, width = NULL, height = NULL, file = NULL) {
#precompiled_html_header <- readRDS("precompiled_html_header.rds")
p <- plotly_build(x)
html <- htmlwidgets:::toHTML(p)
rendered <- htmltools::renderTags(html)
id <- substr(rendered$html, 10, 20)
linebreak <- regexpr('\n', rendered$html)
rendered$htmlwidget <- paste0("  ", substr(rendered$html, 1, linebreak))
rendered$htmlwidget_sizing <- paste0(
"<script type=\"application/htmlwidget-sizing\" data-for=\"",
id,
"\">{\"viewer\":{\"width\":\"100%\",\"height\":400,\"padding\":15,\"fill\":true},\"browser\":{\"width\":\"100%\",\"height\":400,\"padding\":40,\"fill\":true}}</script>")
html <- c(
#precompiled_html_header,
"<body style=\"background-color:white;\">",
"<div id=\"htmlwidget_container\">",
rendered$htmlwidget,
"</div>",
substr(rendered$html, linebreak+1, nchar(rendered$html)),
rendered$htmlwidget_sizing,
"</body>",
"</html>"
)
writeLines(html, file)
}
time = Sys.time()
plotly_save_html(p, file = "plotly_precompiled_test.html")
Sys.time() - time
p <- plotly_build(x)
p
html <- htmlwidgets:::toHTML(p)
html
library(plotly)
library(profvis)
## Create Data
N <- 1e6
df <- data.frame(x_vals = seq_len(N),
y_vals = sin(seq_len(N))*10 + 10)
## Create Plot
df %>%
plot_ly() %>%
add_lines(x = ~x_vals, y = ~y_vals) -> p
## Save
plotly_save_html(p, file = "plotly_precompiled_test.html")
#htmlwidgets::saveWidget(p,file='test2.html',selfcontained = T)
plotly_save_html <- function(x, width = NULL, height = NULL, file = NULL) {
#precompiled_html_header <- readRDS("precompiled_html_header.rds")
p <- plotly_build(x)
html <- htmlwidgets:::toHTML(p)
#rendered <- htmltools::renderTags(html)
# id <- substr(rendered$html, 10, 20)
# linebreak <- regexpr('\n', rendered$html)
# rendered$htmlwidget <- paste0("  ", substr(rendered$html, 1, linebreak))
#
# rendered$htmlwidget_sizing <- paste0(
#   "<script type=\"application/htmlwidget-sizing\" data-for=\"",
#   id,
#   "\">{\"viewer\":{\"width\":\"100%\",\"height\":400,\"padding\":15,\"fill\":true},\"browser\":{\"width\":\"100%\",\"height\":400,\"padding\":40,\"fill\":true}}</script>")
#
# html <- c(
#   #precompiled_html_header,
#   "<body style=\"background-color:white;\">",
#   "<div id=\"htmlwidget_container\">",
#   rendered$htmlwidget,
#   "</div>",
#   substr(rendered$html, linebreak+1, nchar(rendered$html)),
#   rendered$htmlwidget_sizing,
#   "</body>",
#   "</html>"
# )
writeLines(html, file)
}
plotly_save_html(p, file = "plotly_precompiled_test.html")
rendered <- htmltools::renderTags(html)
rendered
draw_segment
kline <- function(NR,NC,I,J, color = "white") {
STEP_X<-1/(NC-1)
STEP_Y<-1/(NR-1)
list(
type = "line",
y0 = STEP_Y*(I),
y1 = STEP_Y*(I+0.5),
yref = "paper",
x0 = STEP_X*(J-0.5),
x1 = STEP_X*(J+1.5),
line = list(color = color)
)
}
# draw lines for low lk values
sub_geno = geno_db_m[geno_db_m$K<lk_cutoff,]
sub_geno
I = 1
J=9*12
NC
