names(new_allele) <-allele_palette$AlleleCol[id]
novel_allele_text <- novelAlleleAnnotation(heatmap.df[grep(paste0("^",names(new_allele),collapse = "|"), heatmap.df$ALLELES), ],
new_label = new_allele)
ids <- heatmap.df$ALLELES %fin% names(new_allele)
rep <- new_allele[heatmap.df$ALLELES[ids]]
heatmap.df[ids, c("ALLELES","text_bottom") := list(rep,rep)]
allele_palette$AlleleCol[id] <- new_allele
names(allele_palette$transper)[id] <- new_allele
novel <- T
}}
sub_lev <- F
if (length(levels(geno_table$SUBJECT)) != 0) {
sub_lev <- T
heatmap.df$SUBJECT <- factor(heatmap.df$SUBJECT, levels = levels(geno_table$SUBJECT))
}
heatmap.df$ALLELES <- factor(heatmap.df$ALLELES, levels = allele_palette$AlleleCol)
heatmap.df$text2 <- paste0("Individual: ",heatmap.df$SUBJECT,
'<br />', "Gene: ", heatmap.df$GENE, '<br />',"Allele: ", heatmap.df$text_bottom,
'<br />',"lK: ", round(as.numeric(heatmap.df$K),4))
col <- ifelse(c(1:(length(samples) * 4))%%3 == 0, "black", "transparent")
col_x <- ifelse(names(gene_loc) %in% gsub(chain,"",color_pes_orf), "brown", "black")
p <- ggplot() + geom_col(data = heatmap.df, mapping = aes_string(x = "GENE_LOC", y = "freq", fill = "ALLELES", text = "text2"),
position = "fill", width = 0.95, na.rm = T) +
scale_fill_manual(values = alpha(names(allele_palette$AlleleCol), allele_palette$transper), name = "Alleles", drop = FALSE) +
facet_grid(SUBJECT ~ title, as.table = FALSE, switch = "y")
#p3 <- barchart(freq ~ GENE_LOC | SUBJECT, data = heatmap.df, as.table = FALSE, layout=c(1,length(samples)))
# Get Allele legend
# gt1 = ggplotGrob(ggplot() + geom_col(data = heatmap.df, mapping = aes_string(x = "GENE_LOC", y = "freq", fill = "ALLELES"),
#                                      position = "fill", width = 0.95, na.rm = T) +
#                    scale_fill_manual(values = alpha(names(allele_palette$AlleleCol), allele_palette$transper), name = "Alleles", drop = FALSE) +
#                    theme(legend.position = "bottom",legend.justification = "center")+ guides(fill = guide_legend(nrow = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
#                                                                                                                  override.aes = list(color = "#DCDCDC"))))
if(html){
p <- p + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0,0),
breaks = 1:length(gene_loc),
labels = names(gene_loc)) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust = 1, size = 10, colour = col_x),
strip.text.y = element_text(angle = 0, size = 10) ,strip.placement = "outside",
strip.background = element_blank(),
axis.ticks.y = element_line(colour = col), axis.text.y = element_blank(), strip.background.y = element_blank(),
legend.position = "bottom",legend.justification = "center", panel.spacing.y = unit(0.9, "pt")) +
labs(y = "", x = "Gene") + guides(fill = guide_legend(nrow = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
override.aes = list(color = "#DCDCDC")))
}else{
p <- p + scale_y_continuous(expand = c(0, 0), sec.axis =  dup_axis(name = "")) + scale_x_continuous(expand = c(0,0),
breaks = 1:length(gene_loc),
labels = names(gene_loc),
sec.axis = dup_axis(name = "")) +
theme(axis.text.x.top = element_text(angle = 90,vjust = 0.5, hjust = 0, size = 10, colour = col_x),
axis.text.x.bottom = element_text(angle = 90,vjust = 0.5, hjust = 1, size = 10, colour = col_x),
strip.text.x = element_blank(),
strip.text.y = element_text(angle = 180, size = 10) ,strip.placement = "outside",
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=4, fill=NA),
axis.ticks.y.left = element_line(colour = col), axis.ticks.y.right = element_blank(), axis.text.y = element_blank(), strip.background.y = element_blank(),
legend.position = "bottom",legend.justification = "center",panel.spacing.y = unit(0.9, "pt")) +
labs(y = "", x = "Gene") + guides(fill = guide_legend(nrow = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
override.aes = list(color = "#DCDCDC")))
}
legend_rows = ceiling(length(allele_palette$AlleleCol)/gene_num)
add_geom = F
if (mark_low_lk) {
geno_db_texture <- geno_db_texture[!duplicated(geno_db_texture[, c("GENE", "ALLELES", "K", "points", "SUBJECT")]), ]
geno_db_texture$col <- paste0("lk<",lk_cutoff)
if(sub_lev) geno_db_texture$SUBJECT <- factor(geno_db_texture$SUBJECT, levels = levels(geno_table$SUBJECT))
geno_db_texture$ALLELES[grep("[0-9][0-9]_[0-9][0-9]", geno_db_texture$ALLELES)] <- "NRA"
geno_db_texture$ALLELES <- factor(geno_db_texture$ALLELES, levels = allele_palette$AlleleCol)
geno_db_texture <- merge(geno_db_texture,heatmap.df,by = names(heatmap.df)[1:4])
if(html){
p <- p + geom_segment(data = geno_db_texture,
mapping = aes_string(x = "x", xend = "xend", y = "points", yend = "yend", linetype = "col",text="text2"),
colour = "white")
add_geom = T
}else{
p <- p + geom_segment(data = geno_db_texture,
mapping = aes_string(x = "x", xend = "xend", y = "points", yend = "yend", color = "col",text="text2"),
colour = "white")
p <- p + geom_abline(aes_string("x","y",colour="color", intercept = 1, slope = 1),
data.frame(x=c(0.01,0.02),y=c(0.03,0.04),color = unique(geno_db_texture$col)), show.legend = T) +
scale_color_manual(values = c("white"), name = "", drop = FALSE) +
guides(color = guide_legend(override.aes = list(size = 0.5), order = 2)) +
theme(legend.justification = "center", legend.key = element_rect(fill = "gray"), legend.position = "bottom")
# gt2 = getDigLegend(unique(geno_db_texture$col))
#
# # Get lK legend
# leg1 = gtable::gtable_filter(gt1, "guide-box")
# leg2 = gtable::gtable_filter(gt2, "guide-box")
# # Combine the legends
# leg <- cbind(leg1[["grobs"]][[1]], leg2[["grobs"]][[1]], size = "first")
# # Insert legend into g1 (or g2)
# gt1$grobs[gt1$layout$name == "guide-box"][[1]] <- leg
# gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[3, c("t", "b")] <- gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[1, c("t", "b")]
# gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[3, c("l", "r")] <- gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[1, c("l", "r")] +
#   3
#legend <- get_legend(gt1)
}
} else legend <- get_legend(p)
short_reads = F
if(nra | novel){
unique_text <- bind_rows(heatmap.df[id_nra,], novel_allele_text) %>% group_by(.data$GENE, .data$SUBJECT) %>%
mutate(pos_f = ifelse(.data$n == 1, 0.5,
ifelse(.data$n == 2, seq(0.25,1,by = 0.5)[1:max(dplyr::row_number())],
ifelse(.data$n == 3, seq(0.165,1,by = 0.33)[1:max(dplyr::row_number())],
seq(0.125,1,by = 0.25)[1:max(dplyr::row_number())]))))
unique_text$text2 <- paste0("Individual: ",unique_text$SUBJECT,
'<br />', "Gene: ", unique_text$GENE,
'<br />',"Allele: ", unique_text$text_bottom,
'<br />',"lK: ", round(as.numeric(unique_text$K),4))
bottom_annot <- c()
if(nra) {
p <- p + geom_text(data = unique_text[unique_text$ALLELES=="NRA",],
aes_string(label = "text", x = "GENE_LOC", y = "pos_f",text = "text2"), angle = 0,
size = unique_text$size[unique_text$ALLELES=="NRA"])
bottom_annot <- unique(heatmap.df$text_bottom[id_nra])
names(bottom_annot) <- unique(heatmap.df$text[id_nra])
short_reads = T
}
## multiple novel alleles annot
if (novel) {
p <- p + geom_text(data = unique_text[unique_text$ALLELES!="NRA",],
aes_string(label = "text", x = "GENE_LOC", y = "pos_f", text = "text2"), angle = 0,
size = unique_text$size[unique_text$ALLELES!="NRA"])
}}
bottom_annot <- unique(heatmap.df[id_nra]$text_bottom)
# Create text for annotating the short reads labels
annot <- splitlines(bottom_annot, line_length)
annot <- annot[!is.na(dplyr::na_if(annot,""))]
annot <- paste0(annot,collapse = '\n')
#gp <- cowplot::ggdraw(cowplot::add_sub(p2,annot))
# lab <- grid::textGrob(annot
#                       , x = unit(.1, "npc"), just = c("left"), gp = grid::gpar(fontsize = 10, col = "black"))
short_reads_rows = length(annot)
short_reads_rows
short_reads_rows = length(annot)
# Create text for annotating the short reads labels
annot <- splitlines(bottom_annot, line_length)
annot <- annot[!is.na(dplyr::na_if(annot,""))]
short_reads_rows = length(annot)
annot <- paste0(annot,collapse = '\n')
short_reads_rows
pdf('sdsd.pdf',width = 100,height = 50)
plot(p +  theme(plot.margin = unit(c(1,1,short_reads_rows,1), "cm")))
grid.text((paste0(annot,collapse = '\n')),
x = unit(.2, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar(fontface = "bold", fontsize = 10, col = "black"))
dev.off()
# source('proftable.R')
# Rprof("profile1.out", line.profiling=TRUE)
#x <- Sys.time()
load('test_func.RData')
load('R/sysdata.rda')
chain = "IGH"; gene_sort = "position"; removeIGH = TRUE; lk_cutoff = 1; mark_low_lk = TRUE; html = FALSE; n_line = 4; line_length=120; pseudo_genes = FALSE; ORF_genes = FALSE; size = 3
samples <- unique(geno_table$SUBJECT)
geno_db <- geno_table %>% select(.data$SUBJECT,.data$GENE,.data$GENOTYPED_ALLELES,.data$K_DIFF)
names(geno_db)[3:4] <- c("ALLELES", "K")
geno_db$ALLELES <- gsub("Deletion","Del",geno_db$ALLELES)
geno_db <- splitstackshape::cSplit(geno_db, "ALLELES", sep = ",", direction = "long", fixed = T, type.convert = F)
geno_db <- setDT(geno_db)[CJ(SUBJECT = SUBJECT, GENE = GENE, unique=TRUE), on=.(SUBJECT, GENE)]
geno_db[is.na(ALLELES) , c("ALLELES","K") := list("Unk", NA_integer_)]
geno_db$K[grep("Del",geno_db$ALLELES)] <- NA_integer_
color_pes_orf <- c()
if(pseudo_genes){
color_pes_orf <- c(grep("V",PSEUDO[[chain]],value = T),color_pes_orf)
}
if(ORF_genes){
color_pes_orf <- c(unique(grep("OR|NL", geno_db$GENE,value = T)),color_pes_orf)
}
geno_db <- sortDFByGene(DATA = geno_db, chain = chain, method = gene_sort, removeIGH = removeIGH, geno = T,
peseudo_remove = pseudo_genes, ORF_remove = ORF_genes)
geno_db$GENE <- factor(geno_db$GENE, levels = gsub("IG[H|K|L]", "", GENE.loc[[chain]]))
gene_loc <- 1:length(unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))])
names(gene_loc) <- unique(geno_db$GENE)[order(match(unique(geno_db$GENE), levels(geno_db$GENE)))]
geno_db$GENE_LOC <- gene_loc[as.character(geno_db$GENE)]
gene_num <- round(length(unique(geno_db$GENE))/3)
geno_db_texture <- c()
geno_db_texture = geno_db[K<lk_cutoff & !ALLELES %in% c("Unk", "Del", "NR")][][CJ(SUBJECT = SUBJECT, GENE = GENE, n_line = 1:n_line, unique = TRUE), on = .(SUBJECT, GENE), nomatch = 0]
if(mark_low_lk & nrow(geno_db_texture) != 0){
geno_db_texture[,n_line:=NULL]
geno_db_texture[, c("points", "yend", "x", "xend") := list(seq(0, 0.9, length.out = n_line),
seq(0, 0.9, length.out = n_line) + 0.1,
gene_loc[as.character(GENE)] - 0.49,
gene_loc[as.character(GENE)] + 0.49),
by = list(SUBJECT,GENE,ALLELES)]
}else{
mark_low_lk <- F
}
#sort the heatmap for plotting
heatmap.df <- geno_db[, n:=  .N, by = list(SUBJECT,GENE)][]
heatmap.df[, freq:= 1/n]
heatmap.df[, title := "Genotype"]
# change ambiguous alleles call
id_nra <- grepl("[0-9][0-9]_[0-9][0-9]", heatmap.df$ALLELES)
nra <- F
if (any(id_nra)) {
num_text <- paste0('[*',1:length(unique(heatmap.df$ALLELES[id_nra])),']')
names(num_text) <- unique(heatmap.df$ALLELES[id_nra])
heatmap.df$text <- ''
heatmap.df$text[id_nra] <- num_text[heatmap.df$ALLELES[id_nra]]
heatmap.df$text_bottom <- heatmap.df$ALLELE
heatmap.df$text_bottom[id_nra] <- paste(num_text[heatmap.df$ALLELES[id_nra]],heatmap.df$ALLELES[id_nra])
heatmap.df$size <- size
heatmap.df[, c("s","by") := list(0.5/n, 1/n)]
heatmap.df[, pos:= seq.int(s[1],1,by = by[1]) , by = list(GENE,SUBJECT)]
heatmap.df$ALLELES[id_nra] <- "NRA"
nra <- T
}
allele_palette <- allelePalette(heatmap.df$ALLELES)
val_novel <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',heatmap.df$ALLELES, value = T)
novel <- F
novel_allele_text <- c()
if(length(val_novel)!=0){
#check novel allele count
novel <- data.frame(Novel=val_novel,
Base = sapply(val_novel,function(x) strsplit(x,'[_]')[[1]][1])) %>%
distinct() %>% group_by(.data$Base) %>% mutate(n = dplyr::n())
# if any base is larger then 6 change to dagger and number
dagger = "^"
if(any(novel$n>6)){
id <- grep('^[0-9]+[_][A-Z][0-9]+[A-Z]',names(allele_palette$transper))
allele_palette$transper[id] <- 1
new_allele <- paste0(dagger,1:length(id),'-',allele_palette$AlleleCol[id])
names(new_allele) <-allele_palette$AlleleCol[id]
novel_allele_text <- novelAlleleAnnotation(heatmap.df[grep(paste0("^",names(new_allele),collapse = "|"), heatmap.df$ALLELES), ],
new_label = new_allele)
ids <- heatmap.df$ALLELES %fin% names(new_allele)
rep <- new_allele[heatmap.df$ALLELES[ids]]
heatmap.df[ids, c("ALLELES","text_bottom") := list(rep,rep)]
allele_palette$AlleleCol[id] <- new_allele
names(allele_palette$transper)[id] <- new_allele
novel <- T
}}
sub_lev <- F
if (length(levels(geno_table$SUBJECT)) != 0) {
sub_lev <- T
heatmap.df$SUBJECT <- factor(heatmap.df$SUBJECT, levels = levels(geno_table$SUBJECT))
}
heatmap.df$ALLELES <- factor(heatmap.df$ALLELES, levels = allele_palette$AlleleCol)
heatmap.df$text2 <- paste0("Individual: ",heatmap.df$SUBJECT,
'<br />', "Gene: ", heatmap.df$GENE, '<br />',"Allele: ", heatmap.df$text_bottom,
'<br />',"lK: ", round(as.numeric(heatmap.df$K),4))
col <- ifelse(c(1:(length(samples) * 4))%%3 == 0, "black", "transparent")
col_x <- ifelse(names(gene_loc) %in% gsub(chain,"",color_pes_orf), "brown", "black")
p <- ggplot() + geom_col(data = heatmap.df, mapping = aes_string(x = "GENE_LOC", y = "freq", fill = "ALLELES", text = "text2"),
position = "fill", width = 0.95, na.rm = T) +
scale_fill_manual(values = alpha(names(allele_palette$AlleleCol), allele_palette$transper), name = "Alleles", drop = FALSE) +
facet_grid(SUBJECT ~ title, as.table = FALSE, switch = "y")
#p3 <- barchart(freq ~ GENE_LOC | SUBJECT, data = heatmap.df, as.table = FALSE, layout=c(1,length(samples)))
# Get Allele legend
# gt1 = ggplotGrob(ggplot() + geom_col(data = heatmap.df, mapping = aes_string(x = "GENE_LOC", y = "freq", fill = "ALLELES"),
#                                      position = "fill", width = 0.95, na.rm = T) +
#                    scale_fill_manual(values = alpha(names(allele_palette$AlleleCol), allele_palette$transper), name = "Alleles", drop = FALSE) +
#                    theme(legend.position = "bottom",legend.justification = "center")+ guides(fill = guide_legend(nrow = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
#                                                                                                                  override.aes = list(color = "#DCDCDC"))))
if(html){
p <- p + scale_y_continuous(expand = c(0, 0)) + scale_x_continuous(expand = c(0,0),
breaks = 1:length(gene_loc),
labels = names(gene_loc)) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust = 1, size = 10, colour = col_x),
strip.text.y = element_text(angle = 0, size = 10) ,strip.placement = "outside",
strip.background = element_blank(),
axis.ticks.y = element_line(colour = col), axis.text.y = element_blank(), strip.background.y = element_blank(),
legend.position = "bottom",legend.justification = "center", panel.spacing.y = unit(0.9, "pt")) +
labs(y = "", x = "Gene") + guides(fill = guide_legend(nrow = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
override.aes = list(color = "#DCDCDC")))
}else{
p <- p + scale_y_continuous(expand = c(0, 0), sec.axis =  dup_axis(name = "")) + scale_x_continuous(expand = c(0,0),
breaks = 1:length(gene_loc),
labels = names(gene_loc),
sec.axis = dup_axis(name = "")) +
theme(axis.text.x.top = element_text(angle = 90,vjust = 0.5, hjust = 0, size = 10, colour = col_x),
axis.text.x.bottom = element_text(angle = 90,vjust = 0.5, hjust = 1, size = 10, colour = col_x),
strip.text.x = element_blank(),
strip.text.y = element_text(angle = 180, size = 10) ,strip.placement = "outside",
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=4, fill=NA),
axis.ticks.y.left = element_line(colour = col), axis.ticks.y.right = element_blank(), axis.text.y = element_blank(), strip.background.y = element_blank(),
legend.position = "bottom",legend.justification = "center",panel.spacing.y = unit(0.9, "pt")) +
labs(y = "", x = "Gene") + guides(fill = guide_legend(ncol = ceiling(length(allele_palette$AlleleCol)/gene_num),order = 1,
override.aes = list(color = "#DCDCDC")))
}
legend_rows = ceiling(length(allele_palette$AlleleCol)/gene_num)
add_geom = F
if (mark_low_lk) {
geno_db_texture <- geno_db_texture[!duplicated(geno_db_texture[, c("GENE", "ALLELES", "K", "points", "SUBJECT")]), ]
geno_db_texture$col <- paste0("lk<",lk_cutoff)
if(sub_lev) geno_db_texture$SUBJECT <- factor(geno_db_texture$SUBJECT, levels = levels(geno_table$SUBJECT))
geno_db_texture$ALLELES[grep("[0-9][0-9]_[0-9][0-9]", geno_db_texture$ALLELES)] <- "NRA"
geno_db_texture$ALLELES <- factor(geno_db_texture$ALLELES, levels = allele_palette$AlleleCol)
geno_db_texture <- merge(geno_db_texture,heatmap.df,by = names(heatmap.df)[1:4])
if(html){
p <- p + geom_segment(data = geno_db_texture,
mapping = aes_string(x = "x", xend = "xend", y = "points", yend = "yend", linetype = "col",text="text2"),
colour = "white")
add_geom = T
}else{
p <- p + geom_segment(data = geno_db_texture,
mapping = aes_string(x = "x", xend = "xend", y = "points", yend = "yend", color = "col",text="text2"),
colour = "white")
p <- p + geom_abline(aes_string("x","y",colour="color", intercept = 1, slope = 1),
data.frame(x=c(0.01,0.02),y=c(0.03,0.04),color = unique(geno_db_texture$col)), show.legend = T) +
scale_color_manual(values = c("white"), name = "", drop = FALSE) +
guides(color = guide_legend(override.aes = list(size = 0.5), order = 2)) +
theme(legend.justification = "center", legend.key = element_rect(fill = "gray"), legend.position = "bottom")
# gt2 = getDigLegend(unique(geno_db_texture$col))
#
# # Get lK legend
# leg1 = gtable::gtable_filter(gt1, "guide-box")
# leg2 = gtable::gtable_filter(gt2, "guide-box")
# # Combine the legends
# leg <- cbind(leg1[["grobs"]][[1]], leg2[["grobs"]][[1]], size = "first")
# # Insert legend into g1 (or g2)
# gt1$grobs[gt1$layout$name == "guide-box"][[1]] <- leg
# gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[3, c("t", "b")] <- gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[1, c("t", "b")]
# gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[3, c("l", "r")] <- gt1$grobs[gt1$layout$name == "guide-box"][[1]]$layout[1, c("l", "r")] +
#   3
#legend <- get_legend(gt1)
}
} else legend <- get_legend(p)
short_reads = F
if(nra | novel){
unique_text <- bind_rows(heatmap.df[id_nra,], novel_allele_text) %>% group_by(.data$GENE, .data$SUBJECT) %>%
mutate(pos_f = ifelse(.data$n == 1, 0.5,
ifelse(.data$n == 2, seq(0.25,1,by = 0.5)[1:max(dplyr::row_number())],
ifelse(.data$n == 3, seq(0.165,1,by = 0.33)[1:max(dplyr::row_number())],
seq(0.125,1,by = 0.25)[1:max(dplyr::row_number())]))))
unique_text$text2 <- paste0("Individual: ",unique_text$SUBJECT,
'<br />', "Gene: ", unique_text$GENE,
'<br />',"Allele: ", unique_text$text_bottom,
'<br />',"lK: ", round(as.numeric(unique_text$K),4))
bottom_annot <- c()
if(nra) {
p <- p + geom_text(data = unique_text[unique_text$ALLELES=="NRA",],
aes_string(label = "text", x = "GENE_LOC", y = "pos_f",text = "text2"), angle = 0,
size = unique_text$size[unique_text$ALLELES=="NRA"])
bottom_annot <- unique(heatmap.df$text_bottom[id_nra])
names(bottom_annot) <- unique(heatmap.df$text[id_nra])
short_reads = T
}
## multiple novel alleles annot
if (novel) {
p <- p + geom_text(data = unique_text[unique_text$ALLELES!="NRA",],
aes_string(label = "text", x = "GENE_LOC", y = "pos_f", text = "text2"), angle = 0,
size = unique_text$size[unique_text$ALLELES!="NRA"])
}}
if(html){
options(warn = -1)
pl <- ggplotly(p + xlab(""), tooltip = "text2") %>%
plotly::layout(xaxis = list(title = paste0(c(rep("&nbsp;", 3),
"Gene", rep("&nbsp;", 3), rep("\n&nbsp;", 1)),
collapse = "")))
# add bg clor to legend (seashell2)
pl$x$layout$legend$bgcolor = "#eee5de"
# switch sample names to left yaxis
smaples_id <- grep("Genotype|Alleles|Gene", pl$x$layout$annotations, invert = T)
# add margin on the left
pl$x$layout$margin$l = 40
pl$x$layout$margin$b = 150
pl$x$layout$margin$l = 100
samples_names <- c()
for(i in smaples_id){
# move to the left side
pl$x$layout$annotations[[i]]$x = -0.005
# anchor to the right
pl$x$layout$annotations[[i]]$xanchor = "right"
samples_names <- c(samples_names, pl$x$layout$annotations[[i]]$text)
}
pl$x$layout$xaxis$ticktext <- sapply(pl$x$layout$xaxis$ticktext, function(x){
ifelse(x %in% gsub(chain,"",color_pes_orf), paste0("[",x,"]"),x)
},USE.NAMES = F)
names(samples_names) <- 1:length(samples_names)
# get the y-axis
yaxis = grep('yaxis',names(pl$x$layout))
# remove ticks
for(i in yaxis){
pl$x$layout[[i]]$tickcolor = "transparent"
}
text_for_hovertext <- function(text, annot, lk_annot, nra=F, allele_anot=c()) {
labels <- text
for (i in 1:length(text)) {
label <- text[i]
gene <- strsplit(strsplit(label, "Gene: ")[[1]][2], '[<]')[[1]][1]
gene_text <- annot[as.numeric(gene)]
if(nra){
allele_nra <- strsplit(strsplit(label,'[<]')[[1]][[1]]," ")[[1]][2]
allele <- paste0("Allele: ", allele_anot[allele_nra])
lk = round(unique(lk_annot$K[lk_annot$GENE==gene_text]),4)
}else{
allele <- strsplit(grep(paste0(gene,'[<]'),text,value=T), "<")[[1]][1]
lk = round(unique(lk_annot$K[lk_annot$GENE==gene_text]),4)
}
labels[i] <- paste0("Gene: ", gene_text, "<br />", allele, "<br />", "lK: ",lk)
}
return(labels)
}
# sort annotations
# title
pl$x$layout$annotations[[1]]$text = ""
# legend name
pl$x$layout$annotations[[grep("Alleles", pl$x$layout$annotations)]]$text = "Alleles"
# Sort legend after K line addition
# get the duplicated markers
unique_legend_markers <- sapply(pl$x$data, function(x) gsub('[(]','',strsplit(x$name,',')[[1]][1]))
group_legend <- sapply(pl$x$data, function(x) gsub('[)]','',strsplit(x$name,',')[[1]][2]))
dup <- which(duplicated(unique_legend_markers))
gene_loc_id <- names(gene_loc)
names(gene_loc_id) <- gene_loc
novel_allele_text_l <- novel_allele_text$text_bottom
names(novel_allele_text_l) <- novel_allele_text$text
for(i in 1:length(unique_legend_markers)){
if(i %in% dup){
# Turn off duplicated
pl$x$data[[i]]$showlegend = FALSE
}else{
# sort the names of the unique markers
pl$x$data[[i]]$name = unique_legend_markers[[i]]
}
if(!grepl('[<]|NRA',unique_legend_markers[[i]])){
pl$x$data[[i]]$marker$line$color = "black"
pl$x$data[[i]]$marker$line$width = 0.1
if(any(grepl('[*]',pl$x$data[[i]]$text))){
pl$x$data[[i]]$type <-  suppressWarnings("text")
pl$x$data[[i]]$hoveron <- "fill"
}else{
if(!is.null(pl$x$data[[i]]$hovertext)){
if(grepl(dagger,pl$x$data[[i]]$text, fixed = T)){
pl$x$data[[i]]$type <-  suppressWarnings("text")
pl$x$data[[i]]$hoveron <- "fill"
pl$x$data[[i]]$hoverinfo <- "skip"
}
}
}
}else{
# sort hovertext for K line
pl$x$data[[i]]$hoverinfo <- "skip"
if(grepl('[<]',unique_legend_markers[[i]])) pl$x$data[[i]]$name = unique_legend_markers[[i]]
else{
pl$x$data[[i]]$name = unique_legend_markers[[i]]
}
}
# switch all to single group
pl$x$data[[i]]$legendgroup = unique_legend_markers[i]
pl$height = max(length(samples) * 35,400)
pl$width = "150%"
}
return(pl)
}else{
# p2 <- plot_grid(p + theme(legend.position = "none",
#                           plot.background = element_rect(fill = "transparent", colour = NA),
#                           panel.background = element_rect(fill = "transparent", colour = NA),
#                           axis.line = element_line(color="black")),
#                 legend, rel_heights = c(0.9,0.1), ncol = 1)
if(short_reads){
bottom_annot <- unique(heatmap.df[id_nra]$text_bottom)
# Create text for annotating the short reads labels
annot <- splitlines(bottom_annot, line_length)
annot <- annot[!is.na(dplyr::na_if(annot,""))]
short_reads_rows = length(annot)
annot <- paste0(annot,collapse = '\n')
#gp <- cowplot::ggdraw(cowplot::add_sub(p2,annot))
# lab <- grid::textGrob(annot
#                       , x = unit(.1, "npc"), just = c("left"), gp = grid::gpar(fontsize = 10, col = "black"))
# gp <- ggplotGrob(p2)
# # Add a row below the 2nd from the bottom
# gp <- gtable::gtable_add_rows(gp, unit(1, "grobheight", lab), -2)
#
# # Add 'lab' grob to that row, under the plot panel
# gp <- gtable::gtable_add_grob(gp, lab, t = -2, l = gp$layout[grep('panel',gp$layout$name)[1],]$l)
}
pdf('sdsd.pdf',width = 100,height = 50)
plot(p +  theme(plot.margin = unit(c(1,1,short_reads_rows/2,1), "cm")))
grid.text((paste0(annot,collapse = '\n')),
x = unit(.2, "npc"), y = unit(.1, "npc"), just = c("left", "bottom"),
gp = gpar(fontface = "bold", fontsize = 10, col = "black"))
dev.off()
#pp <- add_sub(p, paste0(annot,collapse = '\n'), size = 10, colour = "black", x = 0.1)#ggdraw()
print('ok')
}
#print(Sys.time()-x)
# Rprof(NULL)
# summaryRprof("profile1.out", lines = "show")
#
# pdf('sdsd.pdf',width = 50,height = 50)
# plot(p)
# dev.off()
# plots <- c(p,pp)
# layout <- matrix(seq(1, 2),
#                  ncol = 1, nrow = 2)
# pdf('sdsd.pdf',width = 50,height = 50)
# # Set up the page
# grid.newpage()
# pushViewport(viewport(layout = grid.layout(2, 1)))
#
# print(plot(p), vp = viewport(layout.pos.row = 1,
#                                            layout.pos.col = 1))
# print(plot_grid(pp), vp = viewport(layout.pos.row = 2,
#                                            layout.pos.col = 1))
# dev.off()
Rprof("profile1.out", line.profiling=TRUE)
source('check_code.R')
Rprof(NULL)
summaryRprof("profile1.out", lines = "show")
Rprof("profile1.out", line.profiling=TRUE)
source('check_code.R')
Rprof(NULL)
summaryRprof("profile1.out", lines = "show")
ggplot2::benchplot(p +  theme(plot.margin = unit(c(1,1,short_reads_rows/2,1), "cm")))
??ggsave
save.image("/media/ayelet/dc2d1680-cb66-4598-b80a-860491240888/home/Dropbox (BIU)/vdjbaseVis/ggplot_code.RData")
