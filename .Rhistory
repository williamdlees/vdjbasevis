conditions.text <- matrix(geno_db_f[[8]], ncol = 12*genes_n, byrow = TRUE)
vline <- function(x = 0, color = "white") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
kline <- function(NR,NC,X,Y, color = "white") {
STEP_X<-1/(NC-1)
STEP_Y<-1/(NR-1)
y0 = ifelse((Y-1)/NR<0,0,(Y-1)/NR)
y1 = Y/NR#(Y+0.5)*STEP_Y #ifelse((Y-0.5)*STEP_Y < 0, 0, (Y-0.5)*STEP_Y)
list(list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+0.5)*STEP_X,
x1 = (X+3.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+4.5)*STEP_X,
x1 = (X+7.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+8.5)*STEP_X,
x1 = (X+11.5)*STEP_X,
xref = "paper",
line = list(color = color)
))
}
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))#+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
ids_color_scale <- round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)*(ncols-1)
ids_color_scale <- c(ids_color_scale,ids_color_scale[ncols]+(ids_color_scale[ncols]-ids_color_scale[ncols-1]))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 0:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# add grid lines
gridlines <- lapply(seq(11.5,genes_n*12,by=12),vline)
# plot dim
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 2*ncol(m)
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
# add k lines
klines = geno_db_m[geno_db_m$K<lk_cutoff,]
if(nrow(klines)>0){
klines[, y:=match(subject,samples)-1] # row index
klines[, yend:=y+0.5] # row index
klines[, x:=(as.numeric(GENE_LOC)-1)*12] # col index
klines[, xend:=x+1] # col index
NR = samples_n
NC = genes_n*12
klines2 <- apply(klines, 1,function(x) kline(NR,NC,as.numeric(x["x"]),as.numeric(x["y"])))
p <- p %>% plotly::layout(shapes = c(gridlines,unlist(klines2,recursive = F)))
}
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
if(length(ids_text)>0){
annot = geno_db_m[ids_text,]
annot[, y:=(match(subject,samples)-1)]
annot[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
p <- p %>%  plotly::add_annotations(x = annot$x,
y = annot$y,
text = annot$text,
xref = 'x',
yref = 'y', size = 0.025, showarrow = FALSE, font=list(color='black',size=0.025))
}
p %>% plotly::rangeslider()
?rangeslider
p
conditions.text
geno_db_f[[8]]
geno_db_f
geno_db_f
geno_db_f
geno_db_m
geno_db_f = geno_db_m[,.(n_line = 1:line), by = .(subject, gene, GENE_LOC, ALLELES_G, A_CODE,text_bottom,K), nomatch = 0]
geno_db_f
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(geno_db_f[[5]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
allele_code_t <- allele_palette$AlleleCol
names(allele_code_t) <- allele_code
geno_db_f[,text:=paste("Individual:",subject,"<br />Gene:",gene,"<br />Allele:",text_bottom,"<br />Kdiff:",round(K,3))]
geno_db_f
conditions.text <- matrix(geno_db_f[[8]], ncol = 12*genes_n, byrow = TRUE)
vline <- function(x = 0, color = "white") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
kline <- function(NR,NC,X,Y, color = "white") {
STEP_X<-1/(NC-1)
STEP_Y<-1/(NR-1)
y0 = ifelse((Y-1)/NR<0,0,(Y-1)/NR)
y1 = Y/NR#(Y+0.5)*STEP_Y #ifelse((Y-0.5)*STEP_Y < 0, 0, (Y-0.5)*STEP_Y)
list(list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+0.5)*STEP_X,
x1 = (X+3.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+4.5)*STEP_X,
x1 = (X+7.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+8.5)*STEP_X,
x1 = (X+11.5)*STEP_X,
xref = "paper",
line = list(color = color)
))
}
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))#+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
ids_color_scale <- round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)*(ncols-1)
ids_color_scale <- c(ids_color_scale,ids_color_scale[ncols]+(ids_color_scale[ncols]-ids_color_scale[ncols-1]))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 0:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# add grid lines
gridlines <- lapply(seq(11.5,genes_n*12,by=12),vline)
# plot dim
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 2*ncol(m)
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
# add k lines
klines = geno_db_m[geno_db_m$K<lk_cutoff,]
if(nrow(klines)>0){
klines[, y:=match(subject,samples)-1] # row index
klines[, yend:=y+0.5] # row index
klines[, x:=(as.numeric(GENE_LOC)-1)*12] # col index
klines[, xend:=x+1] # col index
NR = samples_n
NC = genes_n*12
klines2 <- apply(klines, 1,function(x) kline(NR,NC,as.numeric(x["x"]),as.numeric(x["y"])))
p <- p %>% plotly::layout(shapes = c(gridlines,unlist(klines2,recursive = F)))
}
p
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
if(length(ids_text)>0){
annot = geno_db_m[ids_text,]
annot[, y:=(match(subject,samples)-1)]
annot[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
p <- p %>%  plotly::add_annotations(x = annot$x,
y = annot$y,
text = annot$text,
xref = 'x',
yref = 'y', size = 0.025, showarrow = FALSE, font=list(color='black',size=0.025))
}
p
geno_db_f
conditions.text <- matrix(geno_db_f[[8]], ncol = 12*genes_n, byrow = TRUE)
conditions.text[1,]
conditions.text <- matrix(geno_db_f[[9]], ncol = 12*genes_n, byrow = TRUE)
vline <- function(x = 0, color = "white") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = x,
x1 = x,
line = list(color = color)
)
}
kline <- function(NR,NC,X,Y, color = "white") {
STEP_X<-1/(NC-1)
STEP_Y<-1/(NR-1)
y0 = ifelse((Y-1)/NR<0,0,(Y-1)/NR)
y1 = Y/NR#(Y+0.5)*STEP_Y #ifelse((Y-0.5)*STEP_Y < 0, 0, (Y-0.5)*STEP_Y)
list(list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+0.5)*STEP_X,
x1 = (X+3.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+4.5)*STEP_X,
x1 = (X+7.5)*STEP_X,
xref = "paper",
line = list(color = color)
),list(
type = "line",
y0 = y0,
y1 = y1,
yref = "paper",
x0 = (X+8.5)*STEP_X,
x1 = (X+11.5)*STEP_X,
xref = "paper",
line = list(color = color)
))
}
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))#+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
zmx <- round(max(m))
zmn <- round(min(m))
ids_color_scale <- round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)*(ncols-1)
ids_color_scale <- c(ids_color_scale,ids_color_scale[ncols]+(ids_color_scale[ncols]-ids_color_scale[ncols-1]))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 0:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# add grid lines
gridlines <- lapply(seq(11.5,genes_n*12,by=12),vline)
# plot dim
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 2*ncol(m)
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
# add k lines
klines = geno_db_m[geno_db_m$K<lk_cutoff,]
if(nrow(klines)>0){
klines[, y:=match(subject,samples)-1] # row index
klines[, yend:=y+0.5] # row index
klines[, x:=(as.numeric(GENE_LOC)-1)*12] # col index
klines[, xend:=x+1] # col index
NR = samples_n
NC = genes_n*12
klines2 <- apply(klines, 1,function(x) kline(NR,NC,as.numeric(x["x"]),as.numeric(x["y"])))
p <- p %>% plotly::layout(shapes = c(gridlines,unlist(klines2,recursive = F)))
}
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
if(length(ids_text)>0){
annot = geno_db_m[ids_text,]
annot[, y:=(match(subject,samples)-1)]
annot[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
p <- p %>%  plotly::add_annotations(x = annot$x,
y = annot$y,
text = annot$text,
xref = 'x',
yref = 'y', size = 0.025, showarrow = FALSE, font=list(color='black',size=0.025))
}
p
colorScale
geno_db_f
ids_color_scale
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = ids_color_scale, ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# add grid lines
gridlines <- lapply(seq(11.5,genes_n*12,by=12),vline)
# plot dim
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 2*ncol(m)
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
# add k lines
klines = geno_db_m[geno_db_m$K<lk_cutoff,]
if(nrow(klines)>0){
klines[, y:=match(subject,samples)-1] # row index
klines[, yend:=y+0.5] # row index
klines[, x:=(as.numeric(GENE_LOC)-1)*12] # col index
klines[, xend:=x+1] # col index
NR = samples_n
NC = genes_n*12
klines2 <- apply(klines, 1,function(x) kline(NR,NC,as.numeric(x["x"]),as.numeric(x["y"])))
p <- p %>% plotly::layout(shapes = c(gridlines,unlist(klines2,recursive = F)))
}
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
if(length(ids_text)>0){
annot = geno_db_m[ids_text,]
annot[, y:=(match(subject,samples)-1)]
annot[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
p <- p %>%  plotly::add_annotations(x = annot$x,
y = annot$y,
text = annot$text,
xref = 'x',
yref = 'y', size = 0.025, showarrow = FALSE, font=list(color='black',size=0.025))
}
p
colorscale
colorScale
colorbar
0:length(seq(1,nrow(colorScale),2))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 1:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
col_names
mypal
ncols
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
p
View(conditions.text)
conditions.text[,1]
conditions.text[,2]
conditions.text[,3]
conditions.text[,1:12]
geno_db_f
geno_db_f[1:12,]
geno_db_f[1:(12*7),]
conditions.text[,1:12]
m[,1:12]
plotly::plot_ly(z=(m),type = "heatmap",
#colorscale= colorScale,
colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
#colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
colorScale
col_names <- unique(sapply(strsplit(gsub("\\^[0-9]+[-]","",allele_palette$AlleleCol),"_",fixed = T), "[[",1, USE.NAMES = T))
mypal <- colorRampPalette(unique(names(allele_palette$AlleleCol)))
ncols = length(unique(names(allele_palette$AlleleCol)))#+1
cols <- mypal(ncols)
zseq <- seq(0,1,length.out=ncols+1)
zseq
cols
ncols
mypal
colorScale <- data.frame(
z = c(0,rep(zseq[-c(1,length(zseq))],each=2),1),
col=rep(cols,each=2)
)
colorScale$col <- as.character(colorScale$col)
colorScale
zmx <- round(max(m))
zmn <- round(min(m))
ids_color_scale <- round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)*(ncols-1)
ids_color_scale <- c(ids_color_scale,ids_color_scale[ncols]+(ids_color_scale[ncols]-ids_color_scale[ncols-1]))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 1:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
#colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
head(p$x$attrs$`301a171cf62d`$z)
head(p$x$attrs$`301a171cf62d`$colorscale)
colorScale
ids_color_scale
round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)
unique(m)
unique(geno_db_f[[5]])
order(unique(geno_db_f[[5]]))
order(as.numeric(unique(geno_db_f[[5]])))
sort(as.numeric(unique(geno_db_f[[5]])))
as.character(colorScale$col,sort(as.numeric(unique(geno_db_f[[5]]))))
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(colors_change[geno_db_f[[5]]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
colors_change <- setNames(round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3),)
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(colors_change[geno_db_f[[5]]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
colorScale$col <- as.character(colorScale$col,sort(as.numeric(unique(geno_db_f[[5]]))))
colors_change <- setNames(round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3),)
setNames(round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3),)
colors_change <- setNames(round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3),sort(as.numeric(unique(geno_db_f[[5]]))))
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(colors_change[geno_db_f[[5]]],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
allele_code_t <- allele_palette$AlleleCol
names(allele_code_t) <- allele_code
geno_db_f[,text:=paste("Individual:",subject,"<br />Gene:",gene,"<br />Allele:",text_bottom,"<br />Kdiff:",round(K,3))]
conditions.text <- matrix(geno_db_f[[9]], ncol = 12*genes_n, byrow = TRUE)
zmx <- round(max(m))
zmn <- round(min(m))
ids_color_scale <- round(sapply(seq(1,nrow(colorScale),2),function(x) mean(colorScale$z[x:(x+1)])),3)*(ncols-1)
ids_color_scale <- c(ids_color_scale,ids_color_scale[ncols]+(ids_color_scale[ncols]-ids_color_scale[ncols-1]))
colorbar=list(tickmode='array', tick0=0, dtick=1,tickvals = 1:length(seq(1,nrow(colorScale),2)), ticktext=c("",col_names),
len = 0.6, outlinecolor="white",bordercolor="white",borderwidth=5,bgcolor="white")
# add grid lines
gridlines <- lapply(seq(11.5,genes_n*12,by=12),vline)
# plot dim
plot_height <- 500 + 10*nrow(m)
plot_width <- 100 + 2*ncol(m)
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
#colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
p
colorScale
geno_db_f
geno_db_f[ALLELES_G=="Del"]
colors_change
colors_change[18]
colors_change
colors_change[as.character(18)]
# transform allele codes to matrix, 12 box for each gene. each row is an individual
m <- matrix(colors_change[as.character(geno_db_f[[5]])],ncol = 12*genes_n,byrow = T,dimnames = list(unique(geno_db_f[[1]]),geno_db_f[[2]][1:(12*genes_n)]))
# create plot
p <- plotly::plot_ly(z=(m),type = "heatmap",
colorscale= colorScale,
#colorbar = colorbar,
hoverinfo='text',text=conditions.text, width = plot_width, height = plot_height) %>%
plotly::layout(yaxis = list(dtick = 1, ticktext = rownames(m), tickmode="array", tickvals = 0:(nrow(m)-1)),
xaxis = list(dtick = 1, ticktext = unique(colnames(m)), tickmode="array", tickvals = seq(6,12*genes_n,12)))
p
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
if(length(ids_text)>0){
annot = geno_db_m[ids_text,]
annot[, y:=(match(subject,samples)-1)]
annot[, x:=((as.numeric(GENE_LOC)-1)*12+as.numeric(id)*(12/n)-1.5 )]
p <- p %>%  plotly::add_annotations(x = annot$x,
y = annot$y,
text = annot$text,
xref = 'x',
yref = 'y', size = 0.025, showarrow = FALSE, font=list(color='black',size=0.025))
}
p
ids_text
# add text annotations
ids_text <- grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
ids_text
geno_db_m$text_bottom
grep('^[0-9]|Del|Unk',geno_db_m$text_bottom,invert = T)
library(vdjbaseVis)
#num_of_genes <- length(unique(genotypes$GENE))
#width <- num_of_genes * 0.24 + 1.5
vdjbaseVis::genoHeatmap_html(genotypes, lk_cutoff = kdiff,
file = file.path(normalizePath(dirname(output_file)),basename(output_file)))
